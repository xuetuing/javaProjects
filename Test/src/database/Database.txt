数据库：DataBase
oracle和Mysql

开发WEB应用程序的三个部分：
浏览器：网页基础
WEB服务器：后台	java
数据库服务器：数据库

关系型数据库模型是把复杂的数据结构归结为简单的二元关系（二维表格形式）
在关系型数据库中，对数据库的操作几乎全部建立在一个或多个关系表格上，通过
对这些关联的表格进行分类、合并、连接或者选取等操作来实现数据的管理

关系型数据库就是：描述两个元素的关联或对应关系，使用关联模型数据组织到二维表中

Sql plus常用命令：
set linesize 200;  设置显示长度，200字节后换行
show user;
select table_name from user_tables;  查询当前用户下的数据表
desc table_name;  查看表结构，（desc dual;测试用）
set timing on;  显示SQL语句的执行时间
clear scr;

关于时间格式的命令：
显示系统时间： select sysdate from dual;
修改当前会话日期格式：alter session set nls_date_format='yyyy-mm-dd';
				 alter session set nls_date_format='yyyy-mm-dd hh24:mi:ss';
Sql plus的默认时间格式为'dd-mon-yy',即'02-7月-18'这种
在操作数据表的日期字段时需要注意，插入的日期格式与系统默认日期格式不匹配的问题：
解决办法：修改插入的日期格式，或者更改会话的日期格式

1.表结构的操作，不涉及内容  create/alter(add、drop、modify)/truncate/drop
1)建表
create table dept_wang(
deptno number(2),
dname varchar2(20),
location varchar2(50)
);

2)增、删、改和清空数据  
alter table table_name add(column_name datatype);

alter table table_name drop(column_name);

alter table table_name modify(column_name new_datatype);

truncate table table_name;

3)删除表
drop table table_name; 

2.数据表内容的操作	insert(values)/update/delete

1)数据插入   -->字符型数据要加单引号
insert into table_name values(v1,v2...);  全部字段插入，一一对应
insert into table_name(column_name1,column_name2...) values(v1,v2...); 指定字段插入

2.数据查询
基础形式：
select column_name...[*] from table_name [where 条件];
涉及的函数：
lower()
upper()
length()

取别名：[as]
select column,column*10 [as] column_name from table_name; //column_name是column*10的别名

涉及的逻辑判断符：
and  or
between .... and ...(a < c < b)  (<>)不等号
is null		is not null
in()	not in()

模糊查询  like   
%:表示0或多个字符
_:表示1个字符
escape:指明转义字符	like 'emp\_' escape '\';
column_name like '%string%' / '_string'
   
字符连接	||
select column1 || column2 from table_name;

6)复制表
select * from emp_wang;
create table temp_emp as select * from emp_wang;

7)去掉重复数据	distinct 跟在select之后
select distinct position from emp_wang;
空值算一种，两个都是null算几种？ -->还是一种
联合去重：多字段去重
select distinct ename,posit
=====================================================================
基础数据查询函数：
1.单行函数：
1)数值型
round(数字,小数位数)  四舍五入
trunc(数字,小数位数)  截断
2)日期函数
sysdate +1 /-1  //表示加减一天
sysdate +1/24   //表示加1小时，其他算法同
next_day(sysdate,1)      //表示下星期日 1-7
months_between(date1,date2)
add_months(date,number)
last_day(date),last_day(date)+1 / -1  //表示加减1天
3)转换函数
to_char(日期数据,格式)
to_date(字符串数据,格式) 只涉及数据类型转换，与数据显示无关
4)coalesce(参数列表)：返回参数列表中第一个非空参数值
5)分支语句
case...when...then...end
	select ename,salary,position,
	case position
	when 'Analyst' then salary*1.2
	when 'Programmer' then salary*1.05
	when 'Clerk' then salary*1.02
	else salary end new_salary
	from emp_wang;
decode():作用和case...when相同
	select ename,salary,position,
	decode(position,
	'Analyst',salary*1.2,
	'Programmer',salary*1.05,
	'Clerk',salary*1.02,
	salary) new_salary
	from emp_wang;
2.组函数：
count():求记录数  能处理任何数据类型，忽略空值
select count(*) from emp_wang;//准确，不忽略空值

处理数值类型数据：忽略空值
sum():求和
avg():平均  //忽略空值导致不准确
select max(salary),min(nvl(salary,0)) from emp_wang;

排序：order by
select ename,deptno d,salary s
from emp_wang
order by 2 asc,3 desc;//数字表示列数
排序可以使用列名、列别名、表达式、函数及数字。

分组：group by
select deptno,max(salary),min(salary)
from emp_wang
where deptno is not null
group by deptno;

having语句：用于对分组之后的数据进行过滤
select deptno,sum(salary)
from emp_wang
where deptno is not null
group by deptno
having sum(salary)>20000;

查询语句写法顺序：select(结果集)->from(表名)->where(条件)->
group by(分组)->having(分组后过滤)->order by(排序)

执行顺序：from->where->group by->having->select->order by

where 和 having的区别
a.where 过来的是行记录，having 过滤的是组
b.where 可以跟任何列名，单行函数，但不能用组函数
c.having只能包含group by之后的表达式或组函数
d.where 比 having先执行
d.where和having都不能跟列别名

windows下只能先停止在启动
mysql重启?-> net stop mysql;
		 -> net start mysql
linux: service mysqld start
	   service mysqld stop
	   service mysqld restart
	      
sql语句的另外写法：
 SELECT e.ename,e.empno,d.dname
 FROM emp_wang e,emp_wang m,dept d
 WHERE e.leader=m.empno AND e.deptno=d.deptno AND e.hiredate<m.hiredate;	      
 
 SELECT e.ename 员工,m.ename 上级
 FROM emp_wang e,emp_wang m
 WHERE e.leader=m.empno(+);
由于KING并没有上级，所以添加一个(+)号表示左连接   
	      
pl/sql编程：
完整定义格式：declare 和exception可选
declare
	/*定义常量、变量、游标、例外、复杂数据类型*/
begin
	/*执行pl/sql语句和sql语句*/
exception
	/*处理运行的各种错误*/
end;
/
	
	

简单定义实例：
create procedure proce_1
as
begin
  update dept_wang set dname='运营部' where deptno=10;
end;
/
调用方式： call proce_1();
sql语句块部分，如果有返回值需要定义变量接收

declare
   v_ename varchar2(20);
begin
   select ename into v_ename from emp_wang where empno=&v_empno;
   dbms_output.put_line('雇员:'||v_ename);
end;
或者
create procedure showname (v_empno number) is/as
   v_ename varchar2(32);
begin
   select ename into v_ename from emp_wang where v_empno=empno;
   dbms_output.put_line('雇员名是'||v_ename);
end;
/
调用：call showname(1010);或者 exec showname(1010);

















