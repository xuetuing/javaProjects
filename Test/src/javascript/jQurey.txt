1.操作DOM元素：jQuery  先引入jQuery文件
1)选择器
     普通选择器:$("#id"); $(".class"); $("element"); $("*"); $("selector1,selector2...");
     分层级:$("ancestor descendant"); $("parent>child"); $("prev + next"); $("prev ~ siblings");(同辈元素)
	
  ------表格或者列表	相关--------
  $("table tr:first");
  $("table tr:last");
  $("table tr:eq(index)"); 
  $("table tr:not(selector)"); //过滤不需要的 
  $("[属性="值"]"); // 根据属性值查找
	
  ===========表单常用的选择器===========
  $(selector:enabled)  - 找可编辑元素	
  $(selector:disabled)  - 找不可编辑元素	

  $("input:disabled").val(); - val()方法可以获取值
  $(selector:text); - 找普通文本框
  $(selector:checked);  - 找选中的节点（单选或复选）
  $(selector:selected);  - 找选中的节点（下拉）

  $("selector:contains(text)"); - 找包含指定文本的节点
  $("selector:empty"); - 找出空的双标记
  
  $("selector:has(selector)");比如$("div:has(p)");包含p的div元素
    属性选择器 ：$("element[attribute]"); [attribute]/[attribute[=/!=/^/$/*/多个联用]]
    	 比如 $("div[name='wo']");
  
2)主要操作方法：
1.在DOM加载完成时运行的代码，可以这样写：相当于window.onload
$(document).ready(function(){
  // 在这里写你的代码...
});
简写：
$(function($) {
  // 你可以在这里继续使用$作为别名...
});

2.将一个或多个对象合并到target
jQuery.extend([deep], target, object1, [objectN])

var settings = { validate: false, limit: 5, name: "foo" };
var options = { validate: true, name: "bar" };
jQuery.extend(settings, options);
settings == { validate: true, limit: 5, name: "bar" }

3.为了避免命名冲突，可以利用对象封装js功能
var admin = {};  //定义对象
$(function(){    //加载完成后执行的主函数
	admin.loadAdmins(1);
	admin.addAdmin();
});
admin.loadAdmins = function(page){}; //函数定义
admin.addAdmins = function(){};

4.获取当前节点的属性值 $(this).attr("className");
     判断当前节点的id是否为某个值，例如$(this).is("#username");
    原生获取输入框中字符串的长度   this.value.length;
    在每一个匹配的元素上触发某类事件:$("form :input").trigger("blur"); 触发每个匹配的input上的事件
  $("form :input")，冒号前有空格

5.select标签上一般添加的事件为onchange, $(selector).change();
    如果在选择默认选中，就是点击后不改变选项的情况下，其级联菜单可能不出来
    可以添加$(selector).trigger("change");
    
6.属性的删除和添加
    对于class属性(class="")：$(selector).addClass()/removeClass()
    对于一般属性：$(selector).removeAttr("")/$(selector).attr("name",value)




















