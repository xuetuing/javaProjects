时间类型数据的处理
Date类		java.util.Date
该类的每个实例用来描述时间
内部 维护了一个long值，记录了自1970年到这一刻时间之间的毫秒差
常用方法：getTime(),setTime(),equals(),clone()
Date now = new Date(); //创建时间对象的同时获取当前时间，默认Date格式
long ms = now.getTime();//获得毫秒形式

now.setTime(ms);//使当前对象表示给定的毫秒表示的时间
Date date = new Date(ms);//以毫秒构造Date格式


SimpleDateFormat类:SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
使用一个特殊的字符串来描述一个时间格式，并使用该时间格式作为桥梁在
字符串和时间之间相互转换
Date <-->String

DateFormat		该类是SimpleDateFormat的父类
该类可以根据给定的地区经Date转换为字符串,不同的地区对应的时间格式字符串是预定义的

Calendar类：抽象类
日历类，用于操作时间的类，是一个抽象类，不能实例化，
使用其提供的工厂方法获取实例：getInstance()：Calendar calendar = Calendar.getInstance();
该方法会根据当前系统所在地区自动判定应使用哪个子类实现

String、Date、Calendar三者之间的转换关系：
String --> SimpleDateFormat.parse() --> Date
Date --> SimpleDateFormat.format() --> String

Date --> Calendar.setTime() --> Calendar
Calendar --> Calendar.getTime() --> Date

Data类对象默认时间格式 --> 毫秒数：data.getTime();
毫秒数 --> Data类对象默认时间格式:data.setTime(ms);或者 Date date = new Date(ms);

Calendar操作时间：
1.获取某个时间单位的值
2.给某个时间单位设置值
3.计算时间
Calendar类的常用方法有： 
calender.get(Calender.YEAR)：返回给定日历字段的值
calendar.set(Calendar.YEAR,2008)： 将给定的日历字段设置为给定值
calendar.getTime():返回此calendar值的Date对象
calendar.setTime():将Date对象转换为calendar
calendar.add()：根据日历的规则，为给定的日历字段添加或减去指定的时间量











