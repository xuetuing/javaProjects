File类：
1）File类代表文件、文件夹
2）可以实现文件系统的操作（创建、修改、删除、查找），没有提供递归处理
3）new File()不是创建文件、文件夹、仅仅创建内存对象，描述一个文件或目录
4）File类不能操作（修改）文件里的内容

文件：就是一个长长的byte有序序列，
序号：0 1 2.........length()-1	length()的类型是long
数据容量：16G	 16*1024*1024*1024(*8)  byte

-----------------------------------------------------------------------------
RandomAccessFile类：用来操作或修改文件的内容
1）以byte(字节，8个位)为单位处理文件
2）使用文件指针（下标）读写文件内容，一次读写一个byte
3）当读写文件内容的时候，文件指针自动加1，为了方便下次的读写操作
4）为了方便基本数据类型的读写，提供了读写基本数据类型的方法，但是底层也是
以byte为单位的读写操作

常用方法：
1）构造方法： 	创建对象的同时自动创建文件，默认打开文件，"r","rw"
如果是写的时候，文件不存在就自动创建文件，打开文件的时候，默认文件的指针
位置为0，如果打开已经存在的文件，立即写，就是覆盖文件内容，如果将文件指针
跳到length()就是直接追加内容。
RandomAccessFile raf = new RandomAccessFile("test.dat","rw");

2）read()	write()
read()读取一个byte字节（读取的结果填充到低8位）
write()写出一个byte字节（写的数据填充到低8位）
3）seek(long l)	移动文件读写指针
4)close()	文件读写结束后都要关闭文件
5）length()	返回文件的长度（字节量）

read()	readInt()	readLong()	readChar()	readDouble()
write() writeInt()	writeLong() writeChar() writeDouble()
getFilePointer():获取游标当前位置
seek(int index):设置游标
----------------------------------------------------------------------------
Java	IO流(Input	Output)
java中的流根据功能划分:输入流和输出流
输入流：用于读取数据
输入流：用于写出数据
输入和输出的参照对象是基于我们的程序而言

流根据处理单位划分：字节流和字符流
字节流：以字节为单位读写数据
字符流：以字符为单位读写数据

流根据级别划分：高级流和低级流
高级流：不能独立存在，必须基于另外一个流工作
低级流：数据有明确的来源和去向

字节输入输出流的父类：
InputStream:字节输入流
OutputStream:字节输入流
以上两个流都是抽象类，有两个子类：

FIS和FOS：用于读写文件的流
FileInputStream:文件字节输入流
FileOutputStream:文件字节输出流

FIS:主要方法		FileInputStream fis = new FileInputStream("fos.dat");
int read()
int read(byte[] b)
int read(byte[] b,int start,int len)
例子：byte[] buffer = new byte[int len];
	fis.read(buffer);
	String str = new String(buffer,0,len,"UTF-8");
	System.out.println(str);

FOS:主要方法		FileOutputStream fos = new FileOutputStream("fos.dat");
				FileOutputStream fos = new FileOutputStream("fos.dat",true);//追加模式
void write()
void write(byte[] b)
void write(byte[] b,int start,int len)
例如：String str = "学码思";
	byte[] date = str.getBytes("UTF-8");
	fos.write(date);
流操作一个重要步骤是:String和bytes之间的转换：getBytes()和new String(byte[] b,int start,int len,charSet)












