java bean规范：不是语法规范，是习惯性的编程规范，用这个规范写的类
使用方便。Java Bean的类也称POJO（plan old java object）类
要求：
1.必须有包
2.java类必须有无参构造器
3.属性有getxx()和setxx()声明的方法
4.必须实现序列化接口（IO流）

@override  重写              @overload  重载

static   静态的，其修饰的资源都是类级别的，是全体对象实例共享的资源
1）属性
	-->使用static修饰的属性，属于全体实例对象共享的资源
	-->静态属性在类加载期间会被初始化
	-->类名.属性名 访问
2）方法
	访问静态方法可以直接用  类名.方法名  访问
	同一类中静态方法中可以访问静态方法（实质是类.方法名的访问方法）
	普通方法只能用对象调用

静态的，使用static修饰的，在类加载之前先加载                      加载顺序

共享	先期加载及初始化	类访问	静态方法的方法	


final   表示最终的，不可更改的
1）final修饰的类，不能被继承
   -->java的String就是final类，不能被继承
   -->Math也是final类，不能被继承
   -->Integer、Long、Double等包装类都是不能被继承的
   -->在实际项目中，原则上不能使用final修饰的类     "动态继承代理"
2）final修饰的方法不能被覆盖（重写）
3）final修饰的变量，初始化后不允许再修改
4）final static修饰的变量作为常量（要求常量名都是大写字母）

从类，变量，方法方面：类不能被继承，方法不能被覆盖，变量不能被修改，常量的定义final static


抽象类	abstract class
抽象方法：只有行为的概念，没有具体的行为实现，使用  abstract 修饰
没有方法体
1）包含抽象方法的类一定是抽象类，但是抽象类不一定只包含抽象方法
2）抽象类不能直接创建实例，但是可以定义引用变量
3）抽象类只能被继承，一个具体的类继承一个抽象类，必须实现所有的抽象方法
4）抽象类和抽象方法是非常适合做“系统分析和设计的工具”

接口    interface
规范：全部的方法都是抽象方法，全部属性都是常量
1.接口是特殊的抽象类，是一个纯抽象类
2.接口用来表示纯抽象的概念，么有任何具体的方法和属性
3.接口不能实例化，但是可以定义引用变量
4.接口变量可以引用具体实现类的实例
5.接口只能被实现，一个具体的类实现接口，必须实现全部的抽象方法
6.接口之间可以相互继承（list,set-->collection）
7.一个具体的类可以实现多个接口，实现多继承现象
8.接口的属性默认是常量，而且是public static final修饰的   //
9.接口中的方法一定是public abstract 修饰的（默认的，可以不写）
10.实现一个接口，使用关键字implements,实际上也是一种继承关系

敌人接口enemy:shootBy()判断 是否被子弹击中
奖励接口Award：getType()获取奖励类型
双倍活力DOUBLE_FIRE=0      命LIFE=1   随机获取

父类飞行物：FlyingObject      moveTo()移动
敌机（方形）：继承飞行物实现敌人接口
小猪（圆形）：继承飞行物实现奖励接口（随机获取奖励类型）
蜜蜂（圆形）：继承飞行物实现敌人和奖励接口（奖励类型为双倍火力）


面试题：
抽象类和接口的区别：
					抽象类							接口					
组成				常量，变量，普通方法，抽象方法			全局常量，抽象方法
				构造方法，	static方法
关键字			abstract						interface
实例化			不可实例化，只能引用子类对象			不可实例化，只能引用子类对象
权限				各种权限							只能public
子类的使用			必须有子类，子类extends抽象类			必须有子类，子类implements多
				实现抽象类父类中所有方法(抽象类除外)		个接口，实现接口中所有方法
限制				单继承限制							没有单继承限制，一个子类可实现多个接口
继承关系			抽象类可实现多个接口，继承单个类		接口被类实现，也可继承多个接口					

工厂设计模式：Factory   结构及代码示例
代理设计模式：proxy		结构及代码示例

@override 和@overload的区别
					 override					overload
含义					       重写						重载
使用				      子类重写父类方法					同一类中
特征变化			   返回值类型，函数名和参数都不变			函数类型不变，参数数量或类型改变



















































