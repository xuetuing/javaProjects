拆装箱的实现： 基本类型和包装类的自动转换
自动装箱时 调用 valueOf()
自动拆箱时 调用 intValue() doubleValue()等
装箱：
public static Integer valueOf(int i) {
	final int offset = 128;
	if (i >= -128 && i <= 127) { // must cache 
	    return IntegerCache.cache[i + offset];  //从IntegerCache.cache获取一个包装类实例
	}
        return new Integer(i);
    }
//亨元设计模式，来减少对象的创建
private static class IntegerCache {
	private IntegerCache(){}

	static final Integer cache[] = new Integer[-(-128) + 127 + 1];

	static {
	    for(int i = 0; i < cache.length; i++)
		cache[i] = new Integer(i - 128);
	}
    }
IntegerCache实现了一个Integer的静态常量数组，在类加载时，执行static静态块进行初始化-128到
127之间的Integer对象，存放到cache数组中，cache属于常量，存放在java方法区中。

public static Float valueOf(float f) {
        return new Float(f);
    }
    只有double和float自动装箱代码没有使用缓存，每次都是new新的对象，其他基本类型都
使用缓存策略，使用缓存是因为，如字符、-128-127之间的数字，这些对象都是经常用到的，防
止每次自动装箱都创建这些对象的实例。而double和float没有特别热的。












































